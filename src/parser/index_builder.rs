use crate::model::Post;
use std::collections::BTreeMap;
use std::path::Path;

/// 树形目录节点
#[derive(Default)]
pub struct IndexNode {
    pub children: BTreeMap<String, IndexNode>,
    pub files: Vec<(String, String, String)>, // (title, rel_path, url)
}

pub fn build_index_tree(posts: &[Post]) -> IndexNode {
    let mut root = IndexNode::default();

    for post in posts {
        let mut node = &mut root;
        let mut path_parts = vec![post.category.clone()];
        if !post.csv_subdir.is_empty() {
            path_parts.extend(post.csv_subdir.split('/').map(|s| s.to_string()));
        }
        if !post.csv_filename.is_empty() {
            path_parts.push(post.csv_filename.clone());
        }
        for part in path_parts {
            node = node.children.entry(part).or_insert_with(IndexNode::default);
        }
        // files 存在于叶子节点
        node.files.push((
            post.title.clone(),
            post.get_rel_save_path(),
            post.url.clone(),
        ));
    }
    root
}

pub fn write_index_html(tree: &IndexNode, outputs_dir: &Path) -> anyhow::Result<()> {
    use std::fs::File;
    use std::io::Write;
    let now_str = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();

    fn write_tree(node: &IndexNode, lines: &mut Vec<String>, indent: usize) {
        for (name, sub) in &node.children {
            lines.push(format!(
                "{:indent$}<li><strong>{}</strong>\n{:indent$}<ul>",
                "", name, "", indent = indent * 2
            ));
            write_tree(sub, lines, indent + 1);
            lines.push(format!("{:indent$}</ul></li>", "", indent = indent * 2));
        }
        for (title, rel_path, url) in &node.files {
            lines.push(format!(
                "{:indent$}<li><a href=\"{}\">{}</a> (<a href=\"{}\" target=\"_blank\">{}</a>)</li>",
                "", rel_path, title, url, url, indent = indent * 2
            ));
        }
    }

    let mut lines = vec![
        "<!DOCTYPE html>".to_string(),
        "<html lang=\"zh-CN\">".to_string(),
        "<head>".to_string(),
        "<meta charset=\"UTF-8\">".to_string(),
        "<title>Hyplus Index - Hyplusite Exporter</title>".to_string(),
        "<meta name=\"author\" content=\"Akira37-hyperplasma\">".to_string(),
        format!("<meta name=\"generated\" content=\"{}\">", now_str),
        "<style>".to_string(),
        "body{font-family:system-ui,-apple-system,sans-serif;line-height:1.4;max-width:800px;margin:30px auto;padding:0 20px;color:#24292e}".to_string(),
        "ul{margin:0 0 0 1.5em;padding:0;}".to_string(),
        "li{margin:.2em 0;}".to_string(),
        "strong{color:#24292e;font-size:1.1em;}".to_string(),
        "a{color:#0366d6;text-decoration:none;}".to_string(),
        "a:hover{text-decoration:underline;}".to_string(),
        ".meta{color:#666;font-size:0.9em;margin-bottom:20px;}".to_string(),
        "</style>".to_string(),
        "</head>".to_string(),
        "<body>".to_string(),
        "<h1>Hyplus Index</h1>".to_string(),
        format!("<p class=\"meta\">Generated by Hyplusite Exporter on {}.<br>Enjoy your reading experience at any time!</p>", now_str),
        "<ul>".to_string(),
    ];
    write_tree(tree, &mut lines, 1);
    lines.extend(vec!["</ul>".to_string(), "</body>".to_string(), "</html>".to_string()]);

    let index_path = outputs_dir.join("index.html");
    let mut file = File::create(index_path)?;
    for line in lines {
        writeln!(file, "{}", line)?;
    }
    Ok(())
}